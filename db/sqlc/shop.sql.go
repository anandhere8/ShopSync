// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: shop.sql

package db

import (
	"context"
	"database/sql"
)

const createShop = `-- name: CreateShop :one
INSERT INTO shops (
  owner_id, shop_name, shop_description, shop_address
) VALUES (
  $1, $2, $3, $4
)
RETURNING shop_id, owner_id, shop_name, shop_description, shop_address, created_at
`

type CreateShopParams struct {
	OwnerID         int64
	ShopName        string
	ShopDescription sql.NullString
	ShopAddress     sql.NullString
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) (Shop, error) {
	row := q.db.QueryRowContext(ctx, createShop,
		arg.OwnerID,
		arg.ShopName,
		arg.ShopDescription,
		arg.ShopAddress,
	)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.ShopName,
		&i.ShopDescription,
		&i.ShopAddress,
		&i.CreatedAt,
	)
	return i, err
}

const deleteShop = `-- name: DeleteShop :exec
DELETE FROM shops
WHERE shop_id = $1
`

func (q *Queries) DeleteShop(ctx context.Context, shopID int64) error {
	_, err := q.db.ExecContext(ctx, deleteShop, shopID)
	return err
}

const getShopByID = `-- name: GetShopByID :one
SELECT shop_id, owner_id, shop_name, shop_description, shop_address, created_at FROM shops
WHERE shop_id = $1 LIMIT 1
`

func (q *Queries) GetShopByID(ctx context.Context, shopID int64) (Shop, error) {
	row := q.db.QueryRowContext(ctx, getShopByID, shopID)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.ShopName,
		&i.ShopDescription,
		&i.ShopAddress,
		&i.CreatedAt,
	)
	return i, err
}

const listShops = `-- name: ListShops :many
SELECT shop_id, owner_id, shop_name, shop_description, shop_address, created_at FROM shops
`

func (q *Queries) ListShops(ctx context.Context) ([]Shop, error) {
	rows, err := q.db.QueryContext(ctx, listShops)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shop
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ShopID,
			&i.OwnerID,
			&i.ShopName,
			&i.ShopDescription,
			&i.ShopAddress,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShop = `-- name: UpdateShop :one
UPDATE shops
SET 
  owner_id = $2,
  shop_name = $3,
  shop_description = $4,
  shop_address = $5
WHERE shop_id = $1
RETURNING shop_id, owner_id, shop_name, shop_description, shop_address, created_at
`

type UpdateShopParams struct {
	ShopID          int64
	OwnerID         int64
	ShopName        string
	ShopDescription sql.NullString
	ShopAddress     sql.NullString
}

func (q *Queries) UpdateShop(ctx context.Context, arg UpdateShopParams) (Shop, error) {
	row := q.db.QueryRowContext(ctx, updateShop,
		arg.ShopID,
		arg.OwnerID,
		arg.ShopName,
		arg.ShopDescription,
		arg.ShopAddress,
	)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.ShopName,
		&i.ShopDescription,
		&i.ShopAddress,
		&i.CreatedAt,
	)
	return i, err
}
