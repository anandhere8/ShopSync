// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
  role_name
) VALUES (
  $1
)
RETURNING role_id, role_name
`

func (q *Queries) CreateRole(ctx context.Context, roleName string) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, roleName)
	var i Role
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE role_id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, roleID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRole, roleID)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT role_id, role_name FROM roles
WHERE role_id = $1 LIMIT 1
`

func (q *Queries) GetRoleByID(ctx context.Context, roleID int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, roleID)
	var i Role
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT role_id, role_name FROM roles
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.RoleID, &i.RoleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET 
  role_name = $2
WHERE role_id = $1
RETURNING role_id, role_name
`

type UpdateRoleParams struct {
	RoleID   int64
	RoleName string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.RoleID, arg.RoleName)
	var i Role
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}
