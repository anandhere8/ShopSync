// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: item.sql

package db

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :one
INSERT INTO Items (
  owner_id, shop_id, item_code, item_name, description, quantity
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING item_id, owner_id, shop_id, item_code, item_name, description, quantity, created_at
`

type CreateItemParams struct {
	OwnerID     int64
	ShopID      int64
	ItemCode    string
	ItemName    string
	Description sql.NullString
	Quantity    int64
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.OwnerID,
		arg.ShopID,
		arg.ItemCode,
		arg.ItemName,
		arg.Description,
		arg.Quantity,
	)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.OwnerID,
		&i.ShopID,
		&i.ItemCode,
		&i.ItemName,
		&i.Description,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM Items
WHERE item_id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, itemID int64) error {
	_, err := q.db.ExecContext(ctx, deleteItem, itemID)
	return err
}

const getItemByID = `-- name: GetItemByID :one
SELECT item_id, owner_id, shop_id, item_code, item_name, description, quantity, created_at FROM Items
WHERE item_id = $1 LIMIT 1
`

func (q *Queries) GetItemByID(ctx context.Context, itemID int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemByID, itemID)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.OwnerID,
		&i.ShopID,
		&i.ItemCode,
		&i.ItemName,
		&i.Description,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT item_id, owner_id, shop_id, item_code, item_name, description, quantity, created_at FROM Items
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ItemID,
			&i.OwnerID,
			&i.ShopID,
			&i.ItemCode,
			&i.ItemName,
			&i.Description,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE Items
SET 
  owner_id = $2,
  shop_id = $3,
  item_code = $4,
  item_name = $5,
  description = $6,
  quantity = $7
WHERE item_id = $1
RETURNING item_id, owner_id, shop_id, item_code, item_name, description, quantity, created_at
`

type UpdateItemParams struct {
	ItemID      int64
	OwnerID     int64
	ShopID      int64
	ItemCode    string
	ItemName    string
	Description sql.NullString
	Quantity    int64
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.ItemID,
		arg.OwnerID,
		arg.ShopID,
		arg.ItemCode,
		arg.ItemName,
		arg.Description,
		arg.Quantity,
	)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.OwnerID,
		&i.ShopID,
		&i.ItemCode,
		&i.ItemName,
		&i.Description,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}
